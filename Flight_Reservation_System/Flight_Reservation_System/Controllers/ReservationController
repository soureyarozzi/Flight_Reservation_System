using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Flight_Reservation_System.Data;
using Flight_Reservation_System.Models;
using System.Security.Claims;
using Flight_Reservation_System.ViewModel;

namespace Flight_Reservation_System.Controllers
{
    public class ReservationController : Controller
    {
        private readonly FlightDbContext _context;

        public ReservationController(FlightDbContext context)
        {
            _context = context;
        }

        // GET: Reservation
        public async Task<IActionResult> Index()
        {
            var flightDbContext = _context.Reservations.Include(f=>f.Flights).Include(p => p.Passenger);
            return View(await flightDbContext.ToListAsync());
        }

        // GET: Reservation/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null|| _context.Reservations == null)
            {
                return NotFound();
            }

            var reservation = await _context.Reservations
                .Include(p => p.Passenger)
                .Include(f => f.Flights)
                .FirstOrDefaultAsync(m => m.ReservationId == id);
            if (reservation == null)
            {
                return NotFound();
            }

            return View(reservation);
        }

        // GET: Reservation/Create
        [HttpGet]
        public IActionResult Create()
        {
            var viewModel = new ReservationCreateViewModel { 
             availableFlights = new SelectList(_context.Flights.ToList(), "FlightId", "Destination"),
             DateReservation = DateTime.Now
            };

            return View(viewModel);
        }

        // POST: Reservation/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(ReservationCreateViewModel model)
        {
            var userID = User.FindFirstValue(ClaimTypes.NameIdentifier);
            
            var passenger = _context.Passengers.FirstOrDefault(p=>p.PassengerId == userID);

            if(passenger == null)
            {
                return NotFound();
            }

          
            if (ModelState.IsValid)
            {
                Reservation reservation = new Reservation()
                {
                    SeatNo = model.SeatNo,
                    FlightId = model.FlightId,
                    DateReservation = model.DateReservation,
                    PassengerId = passenger.PassengerId
                };

                _context.Add(reservation);
                _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }

            return View();
        }

        // GET: Reservation/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null || _context.Reservations == null)
            {
                return NotFound();
            }

            var reservation = await _context.Reservations.FindAsync(id);
            if (reservation == null)
            {
                return NotFound();
            }
            ViewData["PassengerId"] = new SelectList(_context.Passengers, "PassengerId", "FirstName", reservation.PassengerId);
            ViewData["FlightId"] = new SelectList(_context.Flights, "FlightId", "Destination", reservation.FlightId);

            return View(reservation);
        }

        // POST: Reservation/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("ReservationId,SeatNo,DateReservation,FlightId,PassengerId")] Reservation reservation)
        {
            if (id != reservation.ReservationId)
            {
                return NotFound();
            }

            if (reservation!=null)
            {
                try
                {
                    _context.Update(reservation);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ReservationExists(reservation.ReservationId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["PassengerId"] = new SelectList(_context.Passengers, "PassengerId", "FirstName", reservation.PassengerId);
            ViewData["FlightId"] = new SelectList(_context.Flights, "FlightId", "Destination", reservation.FlightId);
            return View(reservation);
        }

        // GET: Reservation/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null || _context.Reservations == null)
            {
                return NotFound();
            }

            var reservation = await _context.Reservations
                .Include(p => p.Passenger)
                .Include(f => f.FlightId)
                .FirstOrDefaultAsync(m => m.ReservationId == id);
            if (reservation == null)
            {
                return NotFound();
            }

            return View(reservation);
        }

        // POST: Reservation/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            if (_context.Reservations == null)
            {
                return Problem("Entity set 'FlightDbContext.Reservations'  is null.");
            }
            var reservation = await _context.Reservations.FindAsync(id);
            if (reservation != null)
            {
                _context.Reservations.Remove(reservation);
            }
            
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ReservationExists(int id)
        {
          return (_context.Reservations?.Any(e => e.ReservationId == id)).GetValueOrDefault();
        }
    }
}

using Flight_Reservation_System.Data;
using Flight_Reservation_System.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;

namespace Flight_Reservation_System.Controllers
{
    public class FlightsController : Controller
    {
        static public List<Flights> flights = new List<Flights>();

        private readonly FlightDbContext _context;

        public FlightsController(FlightDbContext context)
        {
            _context = context;
        }

        public IActionResult Index()
        {
            var flights = _context.Flights.ToList();
            return View(flights);
        }

        /*
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null || _context.Flights == null)
            {
                return NotFound();
            }

            var flight = await _context.Flights
                .FirstOrDefaultAsync(m => m.FlightId == id);
            if (flight == null)
            {
                return NotFound();
            }

            return View(flight);
        }


        //create AirPlane
        public IActionResult Create()
        {
            return View();
        }

        // POST: Planes/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("FlightId,FlightName,Capacity")] AirPlane airplane)
        {
            if (ModelState.IsValid)
            {
                _context.Add(airplane);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["PlaneId"] = new SelectList(_context.AirPlanes, "PlaneId", "PlaneName", "Capacity", airplane.PlaneId.ToString());
            return View(airplane);
        }




        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null || _context.AirPlanes == null)
            {
                return NotFound();
            }

            var airplane = await _context.AirPlanes.FindAsync(id);
            if (airplane == null)
            {
                return NotFound();
            }
            return View(airplane);

            ViewData["PlaneId"] = new SelectList(_context.AirPlanes, "PlaneId", "PlaneName", "Capacity", airplane.PlaneId.ToString());
            return View(airplane);
        }






        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("PlaneId,PlaneName,Capacity")] AirPlane airplane)
        {
            if (id != airplane.PlaneId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(airplane);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!PlaneExists(airplane.PlaneId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["PlaneId"] = new SelectList(_context.AirPlanes, "PlaneId", "PlaneName", "Capacity", airplane.PlaneId.ToString());
            return View(airplane);
        }


        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null || _context.AirPlanes == null)
            {
                return NotFound();
            }

            var airplane = await _context.AirPlanes.FirstOrDefaultAsync(m => m.PlaneId == id);
            if (airplane == null)
            {
                return NotFound();
            }

            return View(airplane);
        }


        // POST: Kitap/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            if (_context.AirPlanes == null)
            {
                return Problem("There are not any Airplane to Delete it.");
            }
            var airplane = await _context.AirPlanes.FindAsync(id);
            if (airplane != null)
            {
                _context.AirPlanes.Remove(airplane);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }


        private bool PlaneExists(int id)
        {
            return (_context.AirPlanes?.Any(e => e.PlaneId == id)).GetValueOrDefault();
        }
        */
    }
}
